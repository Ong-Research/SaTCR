#------------------------------------------------------------------------------#
# 
#   Snakefile to assemble clonotypes from repertoire data
#
#     Author: Rene Welch rwelch2@wisc.edu
#
#------------------------------------------------------------------------------#

import os
import pandas as pd

configfile: "config/config.yaml"

samplefile = config["samplefile"]

sample_table = pd.read_csv(samplefile, index_col = 0)
sample_names = list(sample_table.index)
sample_files = sample_table.loc[:, "sample_file"].to_dict()


seeds = config["seed"]
suffix = config["suffix"]

sample_dict = {}
for sample in sample_names:
  mini_dict = {}
  mini_dict["end1"] = sample_files[sample] + "_R1" + suffix
  mini_dict["end2"] = sample_files[sample] + "_R2" + suffix
  sample_dict[sample] = mini_dict

# QC targets
qc_targets = ["output/qc/multiqc/multiqc_report.html"]
qc_targets.extend(expand("output/qc/figs/{sample}_qc_profile.png",
  sample = sample_names))

# Trim targets
trim_targets = []
trim_targets.extend(
  expand("output/trimmed/{sample}_R1.fastq.gz", sample = sample_names))
trim_targets.extend(
  expand("output/trimmed/{sample}_R2.fastq.gz", sample = sample_names))
trim_targets.extend(
  expand("output/qc/{sample}_trimmed.tsv", sample = sample_names))

# MIXCR targets
mixcr_targets = []
if config["run_mixcr"]:
  mixcr_targets.extend(
    expand("output/clonotypes/mixcr/{sample}/{sample}_airr.tsv",
      sample = sample_names))
  mixcr_targets.extend(
    expand("output/qc/{sample}_trimmed.tsv", sample = sample_names))
  mixcr_targets.extend(
    expand("output/clonotypes/mixcr/{sample}/{sample}_summary.tsv",
      sample = sample_names))

targets = []
targets.extend(qc_targets)
targets.extend(trim_targets)
targets.extend(mixcr_targets)

# if config["run_trust4"]:
#   targets.extend(trust4_targets)

sample_targets = []

if config["run_saturation"]:
  sample_targets.extend(
    expand("output/seq_bootstrap/{seed}/{sample}/", seed = config["seed"],
      sample = config["saturation"]["samples"]))
  sample_targets.extend(
    expand("output/seq_bootstrap/{seed}/{sample}/bootstrap_summary.qs",
      seed = config["seed"],
      sample = config["saturation"]["samples"]))

seed, samples, subsamples = glob_wildcards("output/seq_bootstrap/{seed}/{sample}/{subsample}_R1.fastq.gz")


saturation_mixcr_targets = []
if config["run_saturation"] & config["run_mixcr"]:
  for zip_words in zip(seed, samples, subsamples):
    zip_words = list(zip_words)
    seed = zip_words[0]
    sample = zip_words[1]
    subsample = zip_words[2]
    saturation_mixcr_targets.append(
      "output/seq_bootstrap/mixcr/" + seed + "/" +
        sample + "/" + subsample + "/" + subsample + ".contigs.clns")
    saturation_mixcr_targets.append(
      "output/seq_bootstrap/mixcr/" + seed + "/" + 
        sample + "/" + subsample + "/" + subsample + "_summary.tsv")
    saturation_mixcr_targets.append(
      "output/seq_bootstrap/mixcr/" + seed + "/" + 
        sample + "/" + subsample + "/" + subsample + "_overlap.tsv")

rule all:
  input:
    targets

rule qc:
  input: qc_targets

rule trim:
  input: trim_targets

rule mixcr:
  input: mixcr_targets

rule sampling:
  input:
    sample_targets

rule saturation:
  input:
    saturation_mixcr_targets

rule clean:
  shell:
    """rm -fr output logs"""

rule clean_qc:
  shell:
    """rm -fr output/qc"""

rule clean_trimmed:
  shell:
    """rm -fr output/trimmed output/qc/*trimmed.tsv"""

rule clean_mixcr:
  shell:
    """rm -fr output/clonotypes/mixcr"""

rule clean_saturation:
  shell:
    """rm -fr output/seq_bootstrap"""

rule clean_report:
  shell:
    """
    rm -fr output/report workflow/templates/tmp workflow/templates/_freeze
    touch workflow/templates/*qmd
    """

include: "rules/quality_control.smk"
include: "rules/sampling_saturation.smk"
include: "rules/mixcr_clonotype_assembly.smk"
include: "rules/report.smk"
